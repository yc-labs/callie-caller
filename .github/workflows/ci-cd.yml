name: CI/CD Pipeline - Callie Caller

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: yc-partners
  GAR_REGION: us-central1
  GAR_REPOSITORY: callie-caller
  IMAGE_NAME: callie-caller-prod

jobs:
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate configuration
      run: |
        python -c "from callie_caller import get_version_info; print('Version:', get_version_info())"
        
    - name: Lint code
      run: |
        pip install flake8
        flake8 callie_caller --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Test Docker build
      run: |
        docker build -f Dockerfile.prod -t test-build .

  build-and-push:
    name: Build and Push to Google Artifact Registry
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      image_uri: ${{ steps.build.outputs.IMAGE_URI }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Configure Docker to use gcloud
      run: |
        gcloud auth configure-docker ${{ env.GAR_REGION }}-docker.pkg.dev --quiet
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION="latest"
        else
          VERSION="dev-${GITHUB_SHA::8}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Update version in code
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" callie_caller/_version.py
        
    - name: Build and push Docker image
      id: build
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        IMAGE_URI="${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${VERSION}"
        
        # Build multiplatform image
        docker buildx create --use --name multiplatform
        docker buildx build \
          --platform linux/amd64 \
          --file Dockerfile.prod \
          --tag "${IMAGE_URI}" \
          --push .
          
        # Also tag as latest if this is a release
        if [[ "$VERSION" != "latest" && "$VERSION" != dev-* ]]; then
          LATEST_URI="${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest"
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.prod \
            --tag "${LATEST_URI}" \
            --push .
        fi
        
        echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_OUTPUT
        echo "Image pushed: ${IMAGE_URI}"

  deploy-production:
    name: Deploy to Production VM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Deploy to production VM
      run: |
        chmod +x deploy-vm.sh
        VERSION=${{ needs.build-and-push.outputs.version }}
        export VERSION=${VERSION}
        ./deploy-vm.sh deploy
        
    - name: Verify deployment
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get VM IP
        VM_IP=$(gcloud compute instances describe callie-caller-vm --zone=us-central1-a --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        
        # Health check
        curl -f http://${VM_IP}:8080/health || exit 1
        echo "âœ… Deployment verified - health check passed"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        release_name: Callie Caller v${{ steps.version.outputs.VERSION }}
        body: |
          ## ðŸŽ‰ Callie Caller v${{ steps.version.outputs.VERSION }}
          
          **Production AI Voice Calling System - Automatically deployed!**
          
          ### âœ… Features:
          - Complete SIP calling with Zoho Voice integration
          - Real-time AI conversations using Google Gemini 2.0 Flash
          - Professional API endpoints for call management
          - Automated VM deployment with Docker
          
          ### ðŸš€ Deployment:
          This release has been automatically deployed to production VM.
          
          **Docker Image:** `${{ needs.build-and-push.outputs.image_uri }}`
          
          ### ðŸ“‹ API Endpoints:
          - Health Check: `GET /health`
          - Make Call: `POST /call`
          - View Stats: `GET /stats`
          - Conversations: `GET /conversations`
          
          ### ðŸ”§ Manual Deployment:
          ```bash
          # Clone repository
          git clone https://github.com/troyfortin/callie-caller.git
          cd callie-caller
          
          # Deploy to new VM
          ./deploy-vm.sh deploy
          ```
          
          **Commit:** ${{ github.sha }}
        draft: false
        prerelease: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image_uri }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 