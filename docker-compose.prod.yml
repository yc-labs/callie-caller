version: '3.8'

# Production Docker Compose Configuration
# Uses images from Google Artifact Registry

services:
  callie-caller:
    # Use image from Google Artifact Registry
    # Override with: export GAR_IMAGE=us-central1-docker.pkg.dev/your-project/callie-caller/callie-caller:1.0.0
    image: ${GAR_IMAGE:-us-central1-docker.pkg.dev/PROJECT_ID/callie-caller/callie-caller:latest}
    container_name: callie-caller-prod
    restart: unless-stopped
    
    # Environment configuration
    environment:
      # SIP Configuration (from .env file or environment)
      - ZOHO_SIP_DOMAIN=${ZOHO_SIP_DOMAIN}
      - ZOHO_SIP_USERNAME=${ZOHO_SIP_USERNAME}
      - ZOHO_SIP_PASSWORD=${ZOHO_SIP_PASSWORD}
      
      # Google AI Configuration
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      
      # Production configuration
      - USE_UPNP=${USE_UPNP:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SERVER_PORT=${SERVER_PORT:-8080}
      
      # Container-specific settings
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
    
    # Port mapping
    ports:
      - "${SERVER_PORT:-8080}:8080"
      # RTP port range for audio (adjust firewall accordingly)
      - "10000-10100:10000-10100/udp"
    
    # Volume mounts for production
    volumes:
      # Persistent storage for logs
      - callie_logs:/app/logs
      # Persistent storage for audio recordings
      - callie_audio:/app/captured_audio
      # Mount production configuration if available
      - ${CONFIG_FILE:-./config.env}:/app/.env:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    
    # Production resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Network configuration
    networks:
      - callie-network
    
    # Logging configuration for production
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        compress: "true"
    
    # Security context (if using rootless Docker)
    # user: "1000:1000"
    
    # Labels for monitoring and management
    labels:
      - "com.callie-caller.service=main"
      - "com.callie-caller.environment=production"
      - "traefik.enable=true"
      - "traefik.http.routers.callie.rule=Host(`callie.yourdomain.com`)"
      - "traefik.http.services.callie.loadbalancer.server.port=8080"

  # Optional: Monitoring with Prometheus metrics
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: callie-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - callie-network

  # Optional: Log aggregation with Loki
  # loki:
  #   image: grafana/loki:latest
  #   container_name: callie-loki
  #   restart: unless-stopped
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - loki_data:/loki
  #   networks:
  #     - callie-network

  # Optional: Reverse proxy with Traefik
  # traefik:
  #   image: traefik:v2.10
  #   container_name: callie-traefik
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
  #     - traefik_certs:/certificates
  #   networks:
  #     - callie-network

# Named volumes for persistent data
volumes:
  callie_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  
  callie_audio:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AUDIO_PATH:-./captured_audio}
  
  # Optional monitoring volumes
  # prometheus_data:
  #   driver: local
  # loki_data:
  #   driver: local
  # traefik_certs:
  #   driver: local

# Network configuration
networks:
  callie-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 